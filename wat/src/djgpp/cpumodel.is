# 1 "cpumodel.S"
 


























# 1 "register.h" 1
 















 

























 


















  
    
# 1 "C:/djgpp_v2/include/machine/asm.h" 1 3
 
 
































































# 63 "register.h" 2

     
    
  





# 165 "register.h"




# 28 "cpumodel.S" 2


.data

.align 2; .globl _x86_type ; _x86_type :         .byte 0  
.align 2; .globl _x86_model ; _x86_model :        .byte 0  
.align 2; .globl _x86_mask ; _x86_mask :         .byte 0  
.align 2; .globl _x86_hard_math ; _x86_hard_math :    .long 0  
.align 2; .globl _x86_have_cpuid ; _x86_have_cpuid :   .long 0  
.align 2; .globl _x86_capability ; _x86_capability :   .long 0  
.align 2; .globl _x86_vendor_id ; _x86_vendor_id :    .zero 13  

.text

 


.text; .align 2; .globl  __w32_CheckCpuType    ;  __w32_CheckCpuType    : ;   
    pushl %ebp
    movl  %esp, %ebp
    pushl %ebx

     

    movl $3, _x86_type  

     


    pushfl                           
    pushfl                           
    popl %eax
    
    movl  %eax, %ecx                 
    xorl  $0x40000 , %eax  
    pushl %eax                       
    popfl           
    pushfl                           
    popl  %eax
    
    xorl  %ecx, %eax                 
    andl  $0x40000 ,%eax
   
 
jmp is386

     

    movl  $4, _x86_type  
    movl  %ecx, %eax                 
    xorl  $0x200000 , %eax           
    pushl %eax                       
    popfl               
    pushfl                           
    popl  %eax
            
    xorl  %ecx, %eax                 
    andl  $0x200000 , %eax

     




    je is486x

isnew:  
     

    popfl
    incl _x86_have_cpuid      

     





    movl $1, %eax
    cpuid           

    movb %al, %cl                  
    
    andb $0x0F, %ah                
    movb %ah, _x86_type     

    andb $0xF0, %al                
    shrb $4, %al
    movb %al, _x86_model    
    
    andb $0x0F, %cl                
    movb %cl, _x86_mask     
    
    movl %edx, _x86_capability    
    
     

    xorl %eax, %eax
    cpuid

     

    movl %ebx, _x86_vendor_id  
    movl %edx, _x86_vendor_id+4  
    movl %ecx, _x86_vendor_id+8  
    call check_x87
    jmp  end_CheckCpuType

 





     







is486x:
    xor  %ax, %ax
    sahf
    movw $5, %ax
    movw $2, %bx
    div  %bl
    lahf
    cmpb $2, %ah
    jne  ncyrix

     















    cli
    movw  $0xC3 , %ax; outw %ax, $0x22; inw  $0x23, %ax           
    movw %ax, %cx            
    movw %ax, %bx
    andw $0x0F, %bx          
    orw $0x10, %bx           
    movw  $0xC3 , %ax; outw %ax, $0x22; movw   %bx , %ax; outw %ax, $0x23 

    movw  $0xE8 , %ax; outw %ax, $0x22; inw  $0x23, %ax           
    orw $0x80, %ax           
    movw %ax, %bx            
    movw  $0xE8 , %ax; outw %ax, $0x22; movw   %bx , %ax; outw %ax, $0x23 

    movw  $0xFE , %ax; outw %ax, $0x22; inw  $0x23, %ax           
    andw $0xF0, %ax          
    cmpw $0x30, %ax
    jne n6x86
    movw  $0xE9 , %ax; outw %ax, $0x22; inw  $0x23, %ax           
    andw $0xFD, %ax          
    movw %ax, %bx            
    movw  $0xE9 , %ax; outw %ax, $0x22; movw   %bx , %ax; outw %ax, $0x23 

    movw  $0xC3 , %ax; outw %ax, $0x22; movw   %cx , %ax; outw %ax, $0x23      
    sti
    jmp isnew                

n6x86:
    movw  $0xC3 , %ax; outw %ax, $0x22; movw   %cx , %ax; outw %ax, $0x23      
    sti

ncyrix:
    popfl                    
    call check_x87
    popl %ebx
    jmp  end_CheckCpuType

is386:
    popfl                    
    call check_x87

end_CheckCpuType:
    popl %ebx
    popl %ebp
    ret


 


check_x87:
    movl  $0, _x86_hard_math     
    fninit
    fstsw %ax
    cmpb  $0, %al
    je    1f
    ret

1:  movl $1, _x86_hard_math  
    ret

 






.text; .align 2; .globl  __w32_Get_CR4    ;  __w32_Get_CR4    : ;   
    movw  %cs, %ax
    testw $3, %ax              
    jnz   1f
    .byte 0x0F, 0x20, 0xE0     
    ret

1:  xor %eax, %eax
    ret

 


.text; .align 2; .globl  __w32_SelWriteable    ;  __w32_SelWriteable    : ;   
    movw  4(%esp), %ax
    verw  %ax
    sete  %al
 
 
    ret

 


.text; .align 2; .globl  __w32_SelReadable    ;  __w32_SelReadable    : ;   
    movw  4(%esp), %ax
    verr  %ax
    sete  %al
 
 
    ret

 


.text; .align 2; .globl  __w32_asm_ffs    ;  __w32_asm_ffs    : ;   
    bsf  4(%esp), %eax
    jnz  1f
    movl $-1, %eax
1:  incl %eax
    ret

